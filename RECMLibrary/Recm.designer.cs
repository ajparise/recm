#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parise.RaisersEdge.ConnectionMonitor.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="UNFF")]
	public partial class RecmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLockConnection(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.LockConnection instance);
    partial void UpdateLockConnection(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.LockConnection instance);
    partial void DeleteLockConnection(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.LockConnection instance);
    partial void InsertUser(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.User instance);
    partial void UpdateUser(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.User instance);
    partial void DeleteUser(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.User instance);
    partial void Insertsysprocess(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.sysprocess instance);
    partial void Updatesysprocess(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.sysprocess instance);
    partial void Deletesysprocess(Parise.RaisersEdge.ConnectionMonitor.Data.Entities.sysprocess instance);
    #endregion
		
		public RecmDataContext() : 
				base(global::Parise.RaisersEdge.ConnectionMonitor.Properties.Settings.Default.ServerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RecmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.LockConnection> LockConnections
		{
			get
			{
				return this.GetTable<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.LockConnection>();
			}
		}
		
		public System.Data.Linq.Table<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.User> Users
		{
			get
			{
				return this.GetTable<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.User>();
			}
		}
		
		public System.Data.Linq.Table<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.sysprocess> sysprocesses
		{
			get
			{
				return this.GetTable<Parise.RaisersEdge.ConnectionMonitor.Data.Entities.sysprocess>();
			}
		}
		
		[Function(Name="dbo.CleanupDeadConnectionLocks")]
		public int CleanupDeadConnectionLocks()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
}
namespace Parise.RaisersEdge.ConnectionMonitor.Data.Entities
{
	using System.Runtime.Serialization;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.LOCKCONNECTIONS")]
	[DataContract()]
	public partial class LockConnection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _ConnectionID;
		
		private string _MachineName;
		
		private int _UserID;
		
		private int _ModuleNumber;
		
		private string _Description;
		
		private System.Nullable<short> _SQLProcessID;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private EntityRef<User> _User;
		
		private EntityRef<sysprocess> _sysprocess;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConnectionIDChanging(decimal value);
    partial void OnConnectionIDChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnModuleNumberChanging(int value);
    partial void OnModuleNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSQLProcessIDChanging(System.Nullable<short> value);
    partial void OnSQLProcessIDChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    #endregion
		
		public LockConnection()
		{
			this.Initialize();
		}
		
		[Column(Name="LOCKCONNECTIONSID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="CONNECTIONID", Storage="_ConnectionID", DbType="Decimal(18,0) NOT NULL")]
		[DataMember(Order=2)]
		public decimal ConnectionID
		{
			get
			{
				return this._ConnectionID;
			}
			set
			{
				if ((this._ConnectionID != value))
				{
					this.OnConnectionIDChanging(value);
					this.SendPropertyChanging();
					this._ConnectionID = value;
					this.SendPropertyChanged("ConnectionID");
					this.OnConnectionIDChanged();
				}
			}
		}
		
		[Column(Name="MACHINENAME", Storage="_MachineName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Name="USER_ID", Storage="_UserID", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Name="MODULENUM", Storage="_ModuleNumber", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int ModuleNumber
		{
			get
			{
				return this._ModuleNumber;
			}
			set
			{
				if ((this._ModuleNumber != value))
				{
					this.OnModuleNumberChanging(value);
					this.SendPropertyChanging();
					this._ModuleNumber = value;
					this.SendPropertyChanged("ModuleNumber");
					this.OnModuleNumberChanged();
				}
			}
		}
		
		[Column(Name="DESCRIPTION", Storage="_Description", DbType="VarChar(255)")]
		[DataMember(Order=6)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="spid", Storage="_SQLProcessID", DbType="SmallInt")]
		[DataMember(Order=7)]
		public System.Nullable<short> SQLProcessID
		{
			get
			{
				return this._SQLProcessID;
			}
			set
			{
				if ((this._SQLProcessID != value))
				{
					this.OnSQLProcessIDChanging(value);
					this.SendPropertyChanging();
					this._SQLProcessID = value;
					this.SendPropertyChanged("SQLProcessID");
					this.OnSQLProcessIDChanged();
				}
			}
		}
		
		[Column(Name="LOGIN_TIME", Storage="_LoginTime", DbType="DateTime")]
		[DataMember(Order=8)]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[Association(Name="User_LockConnection", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LockConnections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LockConnections.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="sysprocess_LockConnection", Storage="_sysprocess", ThisKey="SQLProcessID", OtherKey="spid", IsForeignKey=true)]
		public sysprocess sysprocess
		{
			get
			{
				return this._sysprocess.Entity;
			}
			set
			{
				sysprocess previousValue = this._sysprocess.Entity;
				if (((previousValue != value) 
							|| (this._sysprocess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sysprocess.Entity = null;
						previousValue.LockConnections.Remove(this);
					}
					this._sysprocess.Entity = value;
					if ((value != null))
					{
						value.LockConnections.Add(this);
						this._SQLProcessID = value.spid;
					}
					else
					{
						this._SQLProcessID = default(Nullable<short>);
					}
					this.SendPropertyChanged("sysprocess");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._User = default(EntityRef<User>);
			this._sysprocess = default(EntityRef<sysprocess>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.USERS")]
	[DataContract()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
		private short _Supervisor;
		
		private short _HasSupervisorRights;
		
		private string _Logon;
		
		private string _SID;
		
		private short _UseRE7Authentication;
		
		private short _UseWindowsAuthentication;
		
		private EntitySet<LockConnection> _LockConnections;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSupervisorChanging(short value);
    partial void OnSupervisorChanged();
    partial void OnHasSupervisorRightsChanging(short value);
    partial void OnHasSupervisorRightsChanged();
    partial void OnLogonChanging(string value);
    partial void OnLogonChanged();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnUseRE7AuthenticationChanging(short value);
    partial void OnUseRE7AuthenticationChanged();
    partial void OnUseWindowsAuthenticationChanging(short value);
    partial void OnUseWindowsAuthenticationChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[Column(Name="NAME", Storage="_Name", DbType="VarChar(50)")]
		[DataMember(Order=1)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="USER_ID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=2)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="SUPERVISOR", Storage="_Supervisor", DbType="SmallInt NOT NULL")]
		[DataMember(Order=3)]
		public short Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this.OnSupervisorChanging(value);
					this.SendPropertyChanging();
					this._Supervisor = value;
					this.SendPropertyChanged("Supervisor");
					this.OnSupervisorChanged();
				}
			}
		}
		
		[Column(Name="HASSUPERVISORRIGHTS", Storage="_HasSupervisorRights", DbType="SmallInt NOT NULL")]
		[DataMember(Order=4)]
		public short HasSupervisorRights
		{
			get
			{
				return this._HasSupervisorRights;
			}
			set
			{
				if ((this._HasSupervisorRights != value))
				{
					this.OnHasSupervisorRightsChanging(value);
					this.SendPropertyChanging();
					this._HasSupervisorRights = value;
					this.SendPropertyChanged("HasSupervisorRights");
					this.OnHasSupervisorRightsChanged();
				}
			}
		}
		
		[Column(Storage="_Logon", DbType="VarChar(100)")]
		[DataMember(Order=5)]
		public string Logon
		{
			get
			{
				return this._Logon;
			}
			set
			{
				if ((this._Logon != value))
				{
					this.OnLogonChanging(value);
					this.SendPropertyChanging();
					this._Logon = value;
					this.SendPropertyChanged("Logon");
					this.OnLogonChanged();
				}
			}
		}
		
		[Column(Storage="_SID", DbType="VarChar(255)")]
		[DataMember(Order=6)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[Column(Storage="_UseRE7Authentication", DbType="SmallInt NOT NULL")]
		[DataMember(Order=7)]
		public short UseRE7Authentication
		{
			get
			{
				return this._UseRE7Authentication;
			}
			set
			{
				if ((this._UseRE7Authentication != value))
				{
					this.OnUseRE7AuthenticationChanging(value);
					this.SendPropertyChanging();
					this._UseRE7Authentication = value;
					this.SendPropertyChanged("UseRE7Authentication");
					this.OnUseRE7AuthenticationChanged();
				}
			}
		}
		
		[Column(Storage="_UseWindowsAuthentication", DbType="SmallInt NOT NULL")]
		[DataMember(Order=8)]
		public short UseWindowsAuthentication
		{
			get
			{
				return this._UseWindowsAuthentication;
			}
			set
			{
				if ((this._UseWindowsAuthentication != value))
				{
					this.OnUseWindowsAuthenticationChanging(value);
					this.SendPropertyChanging();
					this._UseWindowsAuthentication = value;
					this.SendPropertyChanged("UseWindowsAuthentication");
					this.OnUseWindowsAuthenticationChanged();
				}
			}
		}
		
		[Association(Name="User_LockConnection", Storage="_LockConnections", ThisKey="ID", OtherKey="UserID")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<LockConnection> LockConnections
		{
			get
			{
				if ((this.serializing 
							&& (this._LockConnections.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LockConnections;
			}
			set
			{
				this._LockConnections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LockConnections(LockConnection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LockConnections(LockConnection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void Initialize()
		{
			this._LockConnections = new EntitySet<LockConnection>(new Action<LockConnection>(this.attach_LockConnections), new Action<LockConnection>(this.detach_LockConnections));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="master.dbo.sysprocesses")]
	[DataContract()]
	public partial class sysprocess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _spid;
		
		private short _kpid;
		
		private short _blocked;
		
		private System.Data.Linq.Binary _waittype;
		
		private long _waittime;
		
		private string _lastwaittype;
		
		private string _waitresource;
		
		private short _dbid;
		
		private System.Nullable<short> _uid;
		
		private int _cpu;
		
		private long _physical_io;
		
		private int _memusage;
		
		private System.DateTime _login_time;
		
		private System.DateTime _last_batch;
		
		private short _ecid;
		
		private short _open_tran;
		
		private string _status;
		
		private System.Data.Linq.Binary _sid;
		
		private string _hostname;
		
		private string _program_name;
		
		private string _hostprocess;
		
		private string _cmd;
		
		private string _nt_domain;
		
		private string _nt_username;
		
		private string _net_address;
		
		private string _net_library;
		
		private string _loginame;
		
		private System.Data.Linq.Binary _context_info;
		
		private System.Data.Linq.Binary _sql_handle;
		
		private int _stmt_start;
		
		private int _stmt_end;
		
		private int _request_id;
		
		private EntitySet<LockConnection> _LockConnections;
		
		private EntitySet<sysprocess> _RelatedProcesses;
		
		private EntityRef<sysprocess> _ParentProcess;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnspidChanging(short value);
    partial void OnspidChanged();
    partial void OnkpidChanging(short value);
    partial void OnkpidChanged();
    partial void OnblockedChanging(short value);
    partial void OnblockedChanged();
    partial void OnwaittypeChanging(System.Data.Linq.Binary value);
    partial void OnwaittypeChanged();
    partial void OnwaittimeChanging(long value);
    partial void OnwaittimeChanged();
    partial void OnlastwaittypeChanging(string value);
    partial void OnlastwaittypeChanged();
    partial void OnwaitresourceChanging(string value);
    partial void OnwaitresourceChanged();
    partial void OndbidChanging(short value);
    partial void OndbidChanged();
    partial void OnuidChanging(System.Nullable<short> value);
    partial void OnuidChanged();
    partial void OncpuChanging(int value);
    partial void OncpuChanged();
    partial void Onphysical_ioChanging(long value);
    partial void Onphysical_ioChanged();
    partial void OnmemusageChanging(int value);
    partial void OnmemusageChanged();
    partial void Onlogin_timeChanging(System.DateTime value);
    partial void Onlogin_timeChanged();
    partial void Onlast_batchChanging(System.DateTime value);
    partial void Onlast_batchChanged();
    partial void OnecidChanging(short value);
    partial void OnecidChanged();
    partial void Onopen_tranChanging(short value);
    partial void Onopen_tranChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnsidChanging(System.Data.Linq.Binary value);
    partial void OnsidChanged();
    partial void OnhostnameChanging(string value);
    partial void OnhostnameChanged();
    partial void Onprogram_nameChanging(string value);
    partial void Onprogram_nameChanged();
    partial void OnhostprocessChanging(string value);
    partial void OnhostprocessChanged();
    partial void OncmdChanging(string value);
    partial void OncmdChanged();
    partial void Onnt_domainChanging(string value);
    partial void Onnt_domainChanged();
    partial void Onnt_usernameChanging(string value);
    partial void Onnt_usernameChanged();
    partial void Onnet_addressChanging(string value);
    partial void Onnet_addressChanged();
    partial void Onnet_libraryChanging(string value);
    partial void Onnet_libraryChanged();
    partial void OnloginameChanging(string value);
    partial void OnloginameChanged();
    partial void Oncontext_infoChanging(System.Data.Linq.Binary value);
    partial void Oncontext_infoChanged();
    partial void Onsql_handleChanging(System.Data.Linq.Binary value);
    partial void Onsql_handleChanged();
    partial void Onstmt_startChanging(int value);
    partial void Onstmt_startChanged();
    partial void Onstmt_endChanging(int value);
    partial void Onstmt_endChanged();
    partial void Onrequest_idChanging(int value);
    partial void Onrequest_idChanged();
    #endregion
		
		public sysprocess()
		{
			this.Initialize();
		}
		
		[Column(Storage="_spid", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public short spid
		{
			get
			{
				return this._spid;
			}
			set
			{
				if ((this._spid != value))
				{
					this.OnspidChanging(value);
					this.SendPropertyChanging();
					this._spid = value;
					this.SendPropertyChanged("spid");
					this.OnspidChanged();
				}
			}
		}
		
		[Column(Storage="_kpid", DbType="SmallInt NOT NULL")]
		[DataMember(Order=2)]
		public short kpid
		{
			get
			{
				return this._kpid;
			}
			set
			{
				if ((this._kpid != value))
				{
					this.OnkpidChanging(value);
					this.SendPropertyChanging();
					this._kpid = value;
					this.SendPropertyChanged("kpid");
					this.OnkpidChanged();
				}
			}
		}
		
		[Column(Storage="_blocked", DbType="SmallInt NOT NULL")]
		[DataMember(Order=3)]
		public short blocked
		{
			get
			{
				return this._blocked;
			}
			set
			{
				if ((this._blocked != value))
				{
					this.OnblockedChanging(value);
					this.SendPropertyChanging();
					this._blocked = value;
					this.SendPropertyChanged("blocked");
					this.OnblockedChanged();
				}
			}
		}
		
		[Column(Storage="_waittype", DbType="Binary(2) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Data.Linq.Binary waittype
		{
			get
			{
				return this._waittype;
			}
			set
			{
				if ((this._waittype != value))
				{
					this.OnwaittypeChanging(value);
					this.SendPropertyChanging();
					this._waittype = value;
					this.SendPropertyChanged("waittype");
					this.OnwaittypeChanged();
				}
			}
		}
		
		[Column(Storage="_waittime", DbType="BigInt NOT NULL")]
		[DataMember(Order=5)]
		public long waittime
		{
			get
			{
				return this._waittime;
			}
			set
			{
				if ((this._waittime != value))
				{
					this.OnwaittimeChanging(value);
					this.SendPropertyChanging();
					this._waittime = value;
					this.SendPropertyChanged("waittime");
					this.OnwaittimeChanged();
				}
			}
		}
		
		[Column(Storage="_lastwaittype", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string lastwaittype
		{
			get
			{
				return this._lastwaittype;
			}
			set
			{
				if ((this._lastwaittype != value))
				{
					this.OnlastwaittypeChanging(value);
					this.SendPropertyChanging();
					this._lastwaittype = value;
					this.SendPropertyChanged("lastwaittype");
					this.OnlastwaittypeChanged();
				}
			}
		}
		
		[Column(Storage="_waitresource", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public string waitresource
		{
			get
			{
				return this._waitresource;
			}
			set
			{
				if ((this._waitresource != value))
				{
					this.OnwaitresourceChanging(value);
					this.SendPropertyChanging();
					this._waitresource = value;
					this.SendPropertyChanged("waitresource");
					this.OnwaitresourceChanged();
				}
			}
		}
		
		[Column(Storage="_dbid", DbType="SmallInt NOT NULL")]
		[DataMember(Order=8)]
		public short dbid
		{
			get
			{
				return this._dbid;
			}
			set
			{
				if ((this._dbid != value))
				{
					this.OndbidChanging(value);
					this.SendPropertyChanging();
					this._dbid = value;
					this.SendPropertyChanged("dbid");
					this.OndbidChanged();
				}
			}
		}
		
		[Column(Storage="_uid", DbType="SmallInt")]
		[DataMember(Order=9)]
		public System.Nullable<short> uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[Column(Storage="_cpu", DbType="Int NOT NULL")]
		[DataMember(Order=10)]
		public int cpu
		{
			get
			{
				return this._cpu;
			}
			set
			{
				if ((this._cpu != value))
				{
					this.OncpuChanging(value);
					this.SendPropertyChanging();
					this._cpu = value;
					this.SendPropertyChanged("cpu");
					this.OncpuChanged();
				}
			}
		}
		
		[Column(Storage="_physical_io", DbType="BigInt NOT NULL")]
		[DataMember(Order=11)]
		public long physical_io
		{
			get
			{
				return this._physical_io;
			}
			set
			{
				if ((this._physical_io != value))
				{
					this.Onphysical_ioChanging(value);
					this.SendPropertyChanging();
					this._physical_io = value;
					this.SendPropertyChanged("physical_io");
					this.Onphysical_ioChanged();
				}
			}
		}
		
		[Column(Storage="_memusage", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int memusage
		{
			get
			{
				return this._memusage;
			}
			set
			{
				if ((this._memusage != value))
				{
					this.OnmemusageChanging(value);
					this.SendPropertyChanging();
					this._memusage = value;
					this.SendPropertyChanged("memusage");
					this.OnmemusageChanged();
				}
			}
		}
		
		[Column(Storage="_login_time", DbType="DateTime NOT NULL")]
		[DataMember(Order=13)]
		public System.DateTime login_time
		{
			get
			{
				return this._login_time;
			}
			set
			{
				if ((this._login_time != value))
				{
					this.Onlogin_timeChanging(value);
					this.SendPropertyChanging();
					this._login_time = value;
					this.SendPropertyChanged("login_time");
					this.Onlogin_timeChanged();
				}
			}
		}
		
		[Column(Storage="_last_batch", DbType="DateTime NOT NULL")]
		[DataMember(Order=14)]
		public System.DateTime last_batch
		{
			get
			{
				return this._last_batch;
			}
			set
			{
				if ((this._last_batch != value))
				{
					this.Onlast_batchChanging(value);
					this.SendPropertyChanging();
					this._last_batch = value;
					this.SendPropertyChanged("last_batch");
					this.Onlast_batchChanged();
				}
			}
		}
		
		[Column(Storage="_ecid", DbType="SmallInt NOT NULL")]
		[DataMember(Order=15)]
		public short ecid
		{
			get
			{
				return this._ecid;
			}
			set
			{
				if ((this._ecid != value))
				{
					this.OnecidChanging(value);
					this.SendPropertyChanging();
					this._ecid = value;
					this.SendPropertyChanged("ecid");
					this.OnecidChanged();
				}
			}
		}
		
		[Column(Storage="_open_tran", DbType="SmallInt NOT NULL")]
		[DataMember(Order=16)]
		public short open_tran
		{
			get
			{
				return this._open_tran;
			}
			set
			{
				if ((this._open_tran != value))
				{
					this.Onopen_tranChanging(value);
					this.SendPropertyChanging();
					this._open_tran = value;
					this.SendPropertyChanged("open_tran");
					this.Onopen_tranChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		[DataMember(Order=17)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Column(Storage="_sid", DbType="Binary(86) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public System.Data.Linq.Binary sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[Column(Storage="_hostname", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=19)]
		public string hostname
		{
			get
			{
				return this._hostname;
			}
			set
			{
				if ((this._hostname != value))
				{
					if (this._ParentProcess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhostnameChanging(value);
					this.SendPropertyChanging();
					this._hostname = value;
					this.SendPropertyChanged("hostname");
					this.OnhostnameChanged();
				}
			}
		}
		
		[Column(Storage="_program_name", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=20)]
		public string program_name
		{
			get
			{
				return this._program_name;
			}
			set
			{
				if ((this._program_name != value))
				{
					this.Onprogram_nameChanging(value);
					this.SendPropertyChanging();
					this._program_name = value;
					this.SendPropertyChanged("program_name");
					this.Onprogram_nameChanged();
				}
			}
		}
		
		[Column(Storage="_hostprocess", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=21)]
		public string hostprocess
		{
			get
			{
				return this._hostprocess;
			}
			set
			{
				if ((this._hostprocess != value))
				{
					this.OnhostprocessChanging(value);
					this.SendPropertyChanging();
					this._hostprocess = value;
					this.SendPropertyChanged("hostprocess");
					this.OnhostprocessChanged();
				}
			}
		}
		
		[Column(Storage="_cmd", DbType="NChar(16) NOT NULL", CanBeNull=false)]
		[DataMember(Order=22)]
		public string cmd
		{
			get
			{
				return this._cmd;
			}
			set
			{
				if ((this._cmd != value))
				{
					this.OncmdChanging(value);
					this.SendPropertyChanging();
					this._cmd = value;
					this.SendPropertyChanged("cmd");
					this.OncmdChanged();
				}
			}
		}
		
		[Column(Storage="_nt_domain", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=23)]
		public string nt_domain
		{
			get
			{
				return this._nt_domain;
			}
			set
			{
				if ((this._nt_domain != value))
				{
					this.Onnt_domainChanging(value);
					this.SendPropertyChanging();
					this._nt_domain = value;
					this.SendPropertyChanged("nt_domain");
					this.Onnt_domainChanged();
				}
			}
		}
		
		[Column(Storage="_nt_username", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=24)]
		public string nt_username
		{
			get
			{
				return this._nt_username;
			}
			set
			{
				if ((this._nt_username != value))
				{
					this.Onnt_usernameChanging(value);
					this.SendPropertyChanging();
					this._nt_username = value;
					this.SendPropertyChanged("nt_username");
					this.Onnt_usernameChanged();
				}
			}
		}
		
		[Column(Storage="_net_address", DbType="NChar(12) NOT NULL", CanBeNull=false)]
		[DataMember(Order=25)]
		public string net_address
		{
			get
			{
				return this._net_address;
			}
			set
			{
				if ((this._net_address != value))
				{
					this.Onnet_addressChanging(value);
					this.SendPropertyChanging();
					this._net_address = value;
					this.SendPropertyChanged("net_address");
					this.Onnet_addressChanged();
				}
			}
		}
		
		[Column(Storage="_net_library", DbType="NChar(12) NOT NULL", CanBeNull=false)]
		[DataMember(Order=26)]
		public string net_library
		{
			get
			{
				return this._net_library;
			}
			set
			{
				if ((this._net_library != value))
				{
					this.Onnet_libraryChanging(value);
					this.SendPropertyChanging();
					this._net_library = value;
					this.SendPropertyChanged("net_library");
					this.Onnet_libraryChanged();
				}
			}
		}
		
		[Column(Storage="_loginame", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=27)]
		public string loginame
		{
			get
			{
				return this._loginame;
			}
			set
			{
				if ((this._loginame != value))
				{
					if (this._ParentProcess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnloginameChanging(value);
					this.SendPropertyChanging();
					this._loginame = value;
					this.SendPropertyChanged("loginame");
					this.OnloginameChanged();
				}
			}
		}
		
		[Column(Storage="_context_info", DbType="Binary(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=28)]
		public System.Data.Linq.Binary context_info
		{
			get
			{
				return this._context_info;
			}
			set
			{
				if ((this._context_info != value))
				{
					this.Oncontext_infoChanging(value);
					this.SendPropertyChanging();
					this._context_info = value;
					this.SendPropertyChanged("context_info");
					this.Oncontext_infoChanged();
				}
			}
		}
		
		[Column(Storage="_sql_handle", DbType="Binary(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=29)]
		public System.Data.Linq.Binary sql_handle
		{
			get
			{
				return this._sql_handle;
			}
			set
			{
				if ((this._sql_handle != value))
				{
					this.Onsql_handleChanging(value);
					this.SendPropertyChanging();
					this._sql_handle = value;
					this.SendPropertyChanged("sql_handle");
					this.Onsql_handleChanged();
				}
			}
		}
		
		[Column(Storage="_stmt_start", DbType="Int NOT NULL")]
		[DataMember(Order=30)]
		public int stmt_start
		{
			get
			{
				return this._stmt_start;
			}
			set
			{
				if ((this._stmt_start != value))
				{
					this.Onstmt_startChanging(value);
					this.SendPropertyChanging();
					this._stmt_start = value;
					this.SendPropertyChanged("stmt_start");
					this.Onstmt_startChanged();
				}
			}
		}
		
		[Column(Storage="_stmt_end", DbType="Int NOT NULL")]
		[DataMember(Order=31)]
		public int stmt_end
		{
			get
			{
				return this._stmt_end;
			}
			set
			{
				if ((this._stmt_end != value))
				{
					this.Onstmt_endChanging(value);
					this.SendPropertyChanging();
					this._stmt_end = value;
					this.SendPropertyChanged("stmt_end");
					this.Onstmt_endChanged();
				}
			}
		}
		
		[Column(Storage="_request_id", DbType="Int NOT NULL")]
		[DataMember(Order=32)]
		public int request_id
		{
			get
			{
				return this._request_id;
			}
			set
			{
				if ((this._request_id != value))
				{
					this.Onrequest_idChanging(value);
					this.SendPropertyChanging();
					this._request_id = value;
					this.SendPropertyChanged("request_id");
					this.Onrequest_idChanged();
				}
			}
		}
		
		[Association(Name="sysprocess_LockConnection", Storage="_LockConnections", ThisKey="spid", OtherKey="SQLProcessID")]
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<LockConnection> LockConnections
		{
			get
			{
				if ((this.serializing 
							&& (this._LockConnections.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LockConnections;
			}
			set
			{
				this._LockConnections.Assign(value);
			}
		}
		
		[Association(Name="sysprocess_sysprocess", Storage="_RelatedProcesses", ThisKey="hostname,loginame", OtherKey="hostname,loginame")]
		[DataMember(Order=34, EmitDefaultValue=false)]
		public EntitySet<sysprocess> RelatedProcesses
		{
			get
			{
				if ((this.serializing 
							&& (this._RelatedProcesses.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RelatedProcesses;
			}
			set
			{
				this._RelatedProcesses.Assign(value);
			}
		}
		
		[Association(Name="sysprocess_sysprocess", Storage="_ParentProcess", ThisKey="hostname,loginame", OtherKey="hostname,loginame", IsForeignKey=true)]
		public sysprocess ParentProcess
		{
			get
			{
				return this._ParentProcess.Entity;
			}
			set
			{
				sysprocess previousValue = this._ParentProcess.Entity;
				if (((previousValue != value) 
							|| (this._ParentProcess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentProcess.Entity = null;
						previousValue.RelatedProcesses.Remove(this);
					}
					this._ParentProcess.Entity = value;
					if ((value != null))
					{
						value.RelatedProcesses.Add(this);
						this._hostname = value.hostname;
						this._loginame = value.loginame;
					}
					else
					{
						this._hostname = default(string);
						this._loginame = default(string);
					}
					this.SendPropertyChanged("ParentProcess");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LockConnections(LockConnection entity)
		{
			this.SendPropertyChanging();
			entity.sysprocess = this;
		}
		
		private void detach_LockConnections(LockConnection entity)
		{
			this.SendPropertyChanging();
			entity.sysprocess = null;
		}
		
		private void attach_RelatedProcesses(sysprocess entity)
		{
			this.SendPropertyChanging();
			entity.ParentProcess = this;
		}
		
		private void detach_RelatedProcesses(sysprocess entity)
		{
			this.SendPropertyChanging();
			entity.ParentProcess = null;
		}
		
		private void Initialize()
		{
			this._LockConnections = new EntitySet<LockConnection>(new Action<LockConnection>(this.attach_LockConnections), new Action<LockConnection>(this.detach_LockConnections));
			this._RelatedProcesses = new EntitySet<sysprocess>(new Action<sysprocess>(this.attach_RelatedProcesses), new Action<sysprocess>(this.detach_RelatedProcesses));
			this._ParentProcess = default(EntityRef<sysprocess>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
